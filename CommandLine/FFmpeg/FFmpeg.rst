FFmpeg 实用命令
===============

FFmpeg的\ `官方文档 <https://ffmpeg.org/ffmpeg.html>`__\ 简洁有力，但它的排版逻辑是技术文档而不是工具书或问答，因此可能并不是一个好的参阅选择。

本文将以实际用例为主。毕竟照搬 FFmpeg
的文档实在没有什么意义。不过例子是由浅入深的，如果读者没有任何的 FFmpeg
使用经验，仍然建议按顺序依次浏览。

格式转换
--------

这毫无疑问是最常使用的功能。

转码
~~~~

比如将一个 FLV 文件转为 MP4 文件并重编码，FFmpeg 会自动寻找编解码器：

.. code:: shell

   ffmpeg -i video.flv video.mp4

其中，在 ``-i``
后指定输入文件的文件名，在所有命令的最后指定输出文件的文件名。\ **如果文件名带有空格，请用双引号将文件名包裹。**

注意：转码过程可能较慢。关于快速格式转换，请参阅下文的流复制内容。

流复制
~~~~~~

格式转换还有一种快速的情形。如果两者的所有流都不改动且输出容器支持输入的所有流，那么可以直接向
``-c`` 传递 ``copy``
以进行流复制。这样省去了重新编码的时间，格式转换将十分迅速：

.. code:: shell

   ffmpeg -i video.avi -c copy video.mp4

其中，\ ``-c`` 是 codec
的简称，表示所有流的编解码器。该命令表示所有流均不进行额外操作，直接复制到新容器中。

音频提取
~~~~~~~~

有时需要指定流来完成格式转换，比如将一个 MP4 视频文件转为 AAC
音频文件（此处实质上是直接提取）：

.. code:: shell

   ffmpeg -i video.mp4 -c:a copy audio.aac

此处的 ``-c:a`` 表示音频流；视频流 ``-c:v`` 与字幕流 ``-c:s``
自然也类似。 注意：如果音频流与容器冲突时，你需要将 ``copy``
改为正确的编解码器（或者删去 ``-c:a copy`` 来让 FFmpeg
自动选择），以执行重编码。

截取
----

想要截取 video.mp4 视频的第2到第5分钟，有几种方法。

指定起始与截取长度
~~~~~~~~~~~~~~~~~~

对于容易计算片段秒数的截取任务（本例中片段长为
(5-2)*60=180秒），可以使用 ``-t`` 参数：

.. code:: shell

   ffmpeg -ss 00:02:00 -i video.mp4 -t 180 cut.mp4

其中，\ ``-ss`` 参数指定了起始的时间戳记，而 ``-t``
参数指定了片段长度（秒）。需要注意：

-  在大多数场合，参数 ``-ss`` 放在 ``-i``
   之前，这被称为输入检索（inputing seek）。\ **如果误将 ``-ss`` 放在
   ``-i`` 之后会非常慢**\ ，因为 FFmpeg 会执行输出检索（outputing
   seek），它需要对 ``-ss`` 参数指定的戳记之前的视频内容进行编码操作。
-  传递给 ``-t`` 的片段长度可以写成 ``00:03:00``
   的形式。它也可以带有小数，比如 180.5 表示 180.5 秒。

指定起始与结束
~~~~~~~~~~~~~~

我们更常用的可能是用 ``-to`` 代替 ``-t``\ ，即指定截止的时间戳：

.. code:: shell

   ffmpeg -ss 00:02:00 -i video.mp4 -to 00:05:00 -copyts cut.mp4

此处的 ``-copyts`` 表示沿用原视频的时间轴。这是因为 ``-i``
会重置时间轴；如果不使用 ``-copyts``\ ，将会使传递给 ``-ss`` 的
``00:02:00`` 被重置为视频开始（第0秒），进而导致 ``-to 00:05:00``
会被错误地指定为原视频的第7秒处。

替换或删除流
------------

删除流
~~~~~~

利用 ``-vn/-an/sn/-dn``
参数可以跳过视频/音频/字幕/数据流，比如一段没有音频流的视频：

.. code:: shell

   ffmpeg -i video.mp4 -c:v copy -an NoAudio.mp4

上例中的 ``-c:v`` 是传递视频编解码器，\ ``copy``
表示不进行编解码操作而是直接拷贝。

压制
----

视频的压制主要有 CRF（Constant Rate
Factor，恒定质量）与二压（2Pass）两种常用的方法： - CRF 指定一个 0~51
的数值作为视频质量标准值（FFmpeg 默认 23，常用范围是
17~28），数值越小，恒定质量越好，压缩率也越低。恒定质量的视频码率是根据画面动态调整的，与恒定码率（CBR）恰好是对立的。
-
二压是需要生成固定大小文件时的压制方法，顾名思义，需要编码两次（因此较慢）。用户可能需要自行计算视频码率限值。

在大多数场合，CRF都是更受欢迎的。二压的使用场合主要有两种：一种是压制后文件的大小被严格限制时，另一种是压制后文件的码率被严格限制时。

恒定质量（CRF）
~~~~~~~~~~~~~~~

CRF 的压制中还有一个参数，称为预案
``-preset``\ 。较慢的预案能够更好地发挥压制的效果，按压制后质量从低到高分为
``ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow``
这9种。

下例中使用了 ``slow`` 预案来进行压制。视频编解码器设置为
libx264，设定了一个恒定质量优于默认的 CRF
值（设定的20比默认的23小），并对音频流进行复制：

.. code:: shell

   ffmpeg -i video.mp4 -c:v libx264 -preset slow -crf 20 -c:a copy out.mp4

二压（2Pass）
~~~~~~~~~~~~~

设想一个二压的应用场景：需要将一个10分钟（600秒）长的视频压制到200MB，并保持音频码率在
128 kbps。（\ *本例取自*\ `FFmpeg
Wiki <https://trac.ffmpeg.org/wiki/Encode/H.264>`__\ *\ 。*\ ）

首先计算压制后视频流的比特率值。1 MB = 8192
kbit，下式的第一项即为总文件的比特率值，减去第二项音频流的比特率值，就得到了视频流的比特率值：

.. math::

   \frac{200 \times 8192}{600} - 128 \approx 2730 - 128 = 2602 \,\mathrm{kbit/s}.

在上式的 2602 kbit/s 的基础上留一定余量，设置为 2600 kbit/s：

.. code:: shell

   ffmpeg -y -i video.mp4 -c:v libx264 -b:v 2600k -pass 1 -an -f mp4 NUL ^
   ffmpeg -i video.mp4 -c:v libx264 -b:v 2600k -pass 2 -c:a aac -b:a 128k out.mp4

大部分参数比较好理解，需要说明的是这几个参数： 

- ``-y`` 是一个全局参数，表示覆盖文件时不询问。
- ``NUL`` 表示二压的第一步不输出，而行尾的 ``^`` 表示续行。在 Linux 系统上，请使用 ``/dev/null \`` 代替 ``NUL ^``\ 。
- ``an`` 表示忽略音频流。同理还有 ``-vn/sn/dn``\ 。
